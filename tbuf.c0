/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2021                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/*
 * Text buffers as doubly linked lists.
 * 
 * 15-122 Principles of Imperative Computation */

/*** Interface ***/

typedef struct dll_node dll;
struct dll_node {
  char data; 
  dll* next;
  dll* prev;
};

typedef struct tbuf_header tbuf;
struct tbuf_header {
  dll* start;  /* the fist node of the list (on the left)  */
  dll* cursor; /* the position where the cursor is displayed */
  dll* end;    /* the last node of the list (on the right) */
};
bool is_segment(dll* a, dll* b)
{
  if (a == NULL) return false;
  if (b == NULL) return false;
  dll* x = a;
  dll* y = b;
  while (x != NULL && y != NULL) {
    if (x == b && y == a) return true;
      x = x->next;
      y = y->prev;
  }
  return false;
}
bool well_connected(tbuf* B)
{
  dll* curr = B->start;
  while (curr != B->end)
  {
    if (curr->next != curr->next->prev && curr->next->prev != curr)
      return false;
    curr = curr->next;
  }
  return true;
}
bool is_tbuf(tbuf* B) {
  return B != NULL 
    && B->start != B->cursor 
    && is_segment(B->start, B->end) 
    && is_segment(B->start, B->cursor)
    && is_segment(B->cursor, B->end)
    && well_connected(B);

}

bool tbuf_at_left(tbuf* B) 
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
  if (B->cursor == B->start->next) return true;
  return false;
}            /* Returns true if the cursor       */
                                       /* is in leftmost position          */
bool tbuf_at_right(tbuf* B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
  if (B->cursor == B->end) return true;
  return false;
}          /* Returns true if the cursor       */
                                       /* is in rightmost position         */

tbuf* tbuf_new() 
//@ensures is_tbuf(\result);
{
  tbuf* B = alloc(tbuf);
  B->start = alloc(dll);
  B->end = alloc(dll);
  B->start->next = B->end;
  B->end->prev = B->start;
  B->cursor = B->end;
  return B;
}                      /* Creates a new, empty text buffer */
void tbuf_forward(tbuf* B) 
//@requires is_tbuf(B);
//@requires (!tbuf_at_right(B));
//@ensures is_tbuf(B);       
{
  B->cursor = B->cursor->next;
  return;
}    /* Moves the cursor forward (right) */
void tbuf_backward(tbuf* B)
//@requires is_tbuf(B);
//@requires (!tbuf_at_left(B));
//@ensures is_tbuf(B);
{
  B->cursor = B->cursor->prev;
  return;
}           /* Moves the cursor backward (left) */
void tbuf_insert(tbuf* B, char c)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
  dll* new_char = alloc(dll);
  B->cursor->prev->next = new_char;
  new_char->prev = B->cursor->prev;
  new_char->next = B->cursor;
  B->cursor->prev = new_char;
  new_char->data = c;
  return;
}     /* Insert a character before cursor */
char tbuf_delete(tbuf* B)
//@requires is_tbuf(B);
//@requires !tbuf_at_left(B);
//@ensures is_tbuf(B);
{
  char del = B->cursor->prev->data;
  B->cursor->prev->prev->next = B->cursor;
  B->cursor->prev = B->cursor->prev->prev;
  return del;
}          /* Remove character before cursor   */
                                       /* (and returns the deleted char)   */

int tbuf_row(tbuf* B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
//@ensures \result > 0;
{
  dll* n = B->cursor;
  int rowcounter = 1;
  if (n->data == '\n') rowcounter--;
  while (n != B->start) {
    if (n->data == '\n') rowcounter++;
    n = n->prev;
  }
  return rowcounter;
}                 /* Returns the row of the cursor    */
int tbuf_col(tbuf* B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
//@ensures \result >= 0;
{
  dll* n = B->cursor;
  int columncounter = 0;
  while (n->prev != B->start && n->prev->data != '\n') {
    n = n->prev;
    columncounter++;
  }
  return columncounter;
}                   /* Returns the column of the cursor */

/*** Implementation ***/
