/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2021                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/*
 * Augment doubly linked lists with row and column information.
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface ***/

typedef struct editor_header editor;
struct editor_header {
  tbuf* buffer;
  int row;
  int col;
};

bool is_editor(editor* E)
{
  return E != NULL && is_tbuf(E->buffer) 
    && E->row == tbuf_row(E->buffer) 
    && E->col == tbuf_col(E->buffer);
}

editor* editor_new()
//@ensures is_editor(\result);
{
  editor* E = alloc(editor);
  E->buffer = tbuf_new();
  E->row = 1;
  E->col = 0;
  return E;
}                 /* Creates a new, empty text buffer */
void editor_forward(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);      
{
  if(tbuf_at_right(E->buffer)) return;
  if(E->buffer->cursor->data == '\n') {
    E->row = E->row + 1;
    E->col = 0;
  }
  else {
    E->col = E->col + 1;
  }
  tbuf_forward(E->buffer);
  return;
  
  
}  /* Moves the cursor forward (right) */
void editor_backward(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
  if(tbuf_at_left(E->buffer)) return;
  tbuf_backward(E->buffer);
  if(E->buffer->cursor->data == '\n') {
    E->col = tbuf_col(E->buffer);
    E->row = E->row - 1;
  }
  else {
    E->col = E->col - 1;
  }
  return;

}      /* Moves the cursor backward (left) */
void editor_insert(editor* E, char c)
//@requires is_editor(E);
//@ensures is_editor(E);
{
  tbuf_insert(E->buffer,c);
  if (c == '\n') {
    E->col = 0;
    E->row = E->row + 1;
  }
  else E->col = E->col + 1;
  return;
} /* Insert a character before cursor */
void editor_delete(editor* E)     
//@requires is_editor(E);
//@ensures is_editor(E);
{
  if (tbuf_at_left(E->buffer)) return;
  char delchar = tbuf_delete(E->buffer);
  if (delchar == '\n') {
    E->col = tbuf_col(E->buffer);
    E->row = E->row - 1;
  }
  else {
    E->col = E->col - 1;
  }
  return;
}    /* Remove character before cursor   */
void editor_up(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
  if(tbuf_row(E->buffer) == 1) return;
  int startcol = tbuf_col(E->buffer);
  editor_backward(E);
  while (E->buffer->cursor->data != '\n') editor_backward(E);
  int endcol = tbuf_col(E->buffer);
  while (startcol < endcol) {
    editor_backward(E);
    startcol++;
  }
  return;
}             /* Moves the cursor up              */
void editor_down(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
  int startcol = tbuf_col(E->buffer);
  int counter = 0;
  while (E->buffer->cursor->data != '\n' && !tbuf_at_right(E->buffer)) 
  {
    editor_forward(E);
    counter++;
  }
  if (tbuf_at_right(E->buffer)) {
    for (int i = 0; i < counter; i++) editor_backward(E);
  }
  else {
    editor_forward(E);
    for (int i = 0; i < startcol && E->buffer->cursor->data != '\n'; i++) editor_forward(E);
  }
  return;


}          /* Moves the cursor down            */

/*** Implementation ***/
